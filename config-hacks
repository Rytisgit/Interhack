# looking for neat stuff! first one to really impress me wins a PRIZE!

# mysterious force counter (by Eidolos) {{{
eval if (/\e\[HA mysterious force momentarily surrounds you\.\.\./) { annotate("That's force number " . ++$mysterious_force . ".") }
# }}}

# for dual-SD games (by Eidolos) {{{
eval if (/ T:(\d+)/) { my $mod20 = $1 % 20; \
           if ($mod20 == 3)  { annotate("Remove your left ring.")  } \
        elsif ($mod20 == 5)  { annotate("Put on your left ring.")  } \
        elsif ($mod20 == 11) { annotate("Remove your right ring.") } \
        elsif ($mod20 == 13) { annotate("Put on your right ring.") } }
# }}}

# print a nethackidiocy fortune on the NAO main menu (by Eidolos) {{{
eval if ($at_login) { $postprint .= "\e[s\e[19H\e[1;30m" . `fortune $ENV{HOME}/.fortune/nethackidiocy` . "\e[0m\e[u" }
# }}}

# clrscr when going to the watch menu from main menu (by Eidolos) {{{
keval if ($at_login && $_ eq "w") { print "\e[2J" }
# }}}

# add realtime clock to botl (by Eidolos) {{{
eval BEGIN { $start_time = time } if ($in_game) { my $time = serialize_time(time - $start_time); my $col = 81 - length $time; $postprint .= "\e[s\e[23;${col}H\e[1;44m$time\e[0m\e[u"; }
# }}}

# add geno listing (by Eidolos) {{{
eval while (/Wiped out all (.*?)\./g) { $geno{$1} = 1 } if (/\e\[Hgeno(?:cide)?s?: unknown extended command/) { annotate(join ", ", sort keys %geno) }
# }}}

# add keystroke count extended command (by Eidolos) {{{
s/key(?:stroke)?s?: unknown extended command/$keystrokes keystrokes thus far.\e[K/g
# }}}

# add realtime listing (if you don't like the timer) (by Eidolos) {{{
eval BEGIN { $start_time = time } s/(?:real)?timer?: unknown extended command/serialize_time(time - $start_time) . " thus far.\e[K"/eg
# }}}

# avoid displaying stats on botl (by Eidolos) {{{
eval s/\bSt:\d+.*?Ch:\d+/' ' x length $&/eg and $stats = $&; s/stat(?:istic)?s?: unknown extended command/$stats\e[K/g
# }}}

# power colors! (by Eidolos) {{{
eval s{Pw:((-?\d+)\((-?\d+)\))}{                    \
       my $color = '';                              \
          if ($2 >= $3)     {                     } \
       elsif ($2 * 2 >= $3) { $color = "\e[1;36m" } \
       elsif ($2 * 3 >= $3) { $color = "\e[1;35m" } \
       else                 { $color = "\e[0;35m" } \
       "Pw:$color$1\e[0m"                           \
     }eg;
# }}}

# hpmon done right (by Eidolos) {{{
eval s{(\e\[24;\d+H|HP:)((\d+)\((\d+)\))}{                     \
       my $color = '';                                         \
          if ($3 * 7 <= $4 || $3 <= 6) { $color = "\e[1;30m" } \
       elsif ($3     >= $4)            {                     } \
       elsif ($3 * 2 >= $4)            { $color = "\e[1;32m" } \
       elsif ($3 * 3 >= $4)            { $color = "\e[1;33m" } \
       elsif ($3 * 4 >= $4)            { $color = "\e[0;31m" } \
       elsif ($3 * 5 >= $4)            { $color = "\e[1;31m" } \
       "$1$color$2\e[0m"                                       \
     }eg;
# }}}

# display exp needed to next level (by Eidolos) {{{
eval s{Xp:(\d+)\/(\d+)}{                                           \
       my $length = length $2;                                     \
       my $exp_needed = $1 < 11 ? 10     * 2 ** $1                 \
                      : $1 < 21 ? 10_000 * 2 ** $1                 \
                      : 10_000_000 * ($level - 19);                \
       $exp_needed -= $2;                                          \
       if (length($exp_needed)-1 > $length) { "Xp:$1!$2" }         \
       else { sprintf "X:%dn%-".(1+$length)."s", $1, $exp_needed } \
     }eg;
# }}}
